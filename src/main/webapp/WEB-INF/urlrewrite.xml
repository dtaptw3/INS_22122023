<urlrewrite>

	 <!-- <rule>
		<from>/index.xhtml</from> 
		<to>/secured/login.html</to> 
	</rule> 
	
	<rule>
		<from>/index.html</from> 
		<to>/secured/login.html</to> 
	</rule>
	
	 <rule>
		<from>/updates.xhtml</from> 
		<to>/secured/updates.html</to> 
	</rule>
	
	 <rule>
		<from>/updates.html</from> 
		<to>/secured/updates.html</to> 
	</rule>
	
	
	<rule>
		<from>/secured/([0-9]+)</from>  
		<to>/secured/masterLayout.html</to> 
	</rule>   -->

	<!-- <rule> <name>From Static to Dynamic</name> <note> How can we transform 
		a static page foo.html into a dynamic variant foo.cgi in a seamless way, 
		i.e. without notice by the browser/user. We just rewrite the URL to the jsp/servlet 
		and force the correct MIME-type so it gets really run as a CGI-script. This 
		way a request to /~quux/foo.html internally leads to the invocation of /~quux/foo.jsp. 
		RewriteBase /~quux/ RewriteRule ^foo\.html$ foo.cgi [T=application/x-httpd-cgi] 
		</note> <from>^/~quux/foo\.html$</from> <to>/~quux/foo.jsp</to> </rule> -->

	<!-- <rule> <name>Canonical URLs</name> <note> On some webservers there 
		are more than one URL for a resource. Usually there are canonical URLs (which 
		should be actually used and distributed) and those which are just shortcuts, 
		internal ones, etc. Independent of which URL the user supplied with the request 
		he should finally see the canonical one only. We do an external HTTP redirect 
		for all non-canonical URLs to fix them in the location view of the Browser 
		and for all subsequent requests. In the example ruleset below we replace 
		/~user by the canonical /u/user and fix a missing trailing slash for /u/user. 
		RewriteRule ^/~([^/]+)/?(.*) /u/$1/$2 [R] RewriteRule ^/([uge])/([^/]+)$ 
		/$1/$2/ [R] </note> <from>^/~([^/]+)/?(.*)</from> <to type="redirect">/u/$1/$2</to> 
		</rule> <rule> <from>^/([uge])/([^/]+)$</from> <to type="redirect">/$1/$2/</to> 
		</rule> -->


	<!-- <rule> <name>Canonical Hostnames</name> <note> The goal of this rule 
		is to force the use of a particular hostname, in preference to other hostnames 
		which may be used to reach the same site. For example, if you wish to force 
		the use of www.example.com instead of example.com, you might use a variant 
		of the following recipe. RewriteCond %{HTTP_HOST} !^fully\.qualified\.domain\.name 
		[NC] RewriteCond %{HTTP_HOST} !^$ RewriteRule ^/(.*) http://fully.qualified.domain.name/$1 
		[L,R] </note> <condition name="host" operator="notequal">^fully\.qualified\.domain\.name</condition> 
		<condition name="host" operator="notequal">^$</condition> <from>^/(.*)</from> 
		<to type="redirect" last="true">http://fully.qualified.domain.name/$1</to> 
		</rule> -->

	<!-- INSTALLATION in your web.xml add... <filter> <filter-name>UrlRewriteFilter</filter-name> 
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class> 
		<init-param> <param-name>logLevel</param-name> <param-value>WARN</param-value> 
		</init-param> </filter> <filter-mapping> <filter-name>UrlRewriteFilter</filter-name> 
		<url-pattern>/*</url-pattern> </filter-mapping> EXAMPLES Redirect one url 
		<rule> <from>/some/old/page.html</from> <to type="redirect">/very/new/page.html</to> 
		</rule> Redirect a directory <rule> <from>/some/olddir/(.*)</from> <to type="redirect">/very/newdir/$1</to> 
		</rule> Clean a url <rule> <from>/products/([0-9]+)</from> <to>/products/index.jsp?product_id=$1</to> 
		</rule> eg, /products/1234 will be passed on to /products/index.jsp?product_id=1234 
		without the user noticing. Browser detection <rule> <condition name="user-agent">Mozilla/[1-4]</condition> 
		<from>/some/page.html</from> <to>/some/page-for-old-browsers.html</to> </rule> 
		eg, will pass the request for /some/page.html on to /some/page-for-old-browsers.html 
		only for older browsers whose user agent srtings match Mozilla/1, Mozilla/2, 
		Mozilla/3 or Mozilla/4. Centralised browser detection <rule> <condition name="user-agent">Mozilla/[1-4]</condition> 
		<set type="request" name="browser">moz</set> </rule> eg, all requests will 
		be checked against the condition and if matched request.setAttribute("browser", 
		"moz") will be called. -->

</urlrewrite>